version: 0.2

phases:
#  install:
    # runtime-versions:
    #   java: corretto11
  pre_build:
    commands:
      # Installing resources for Kubectl
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - chmod +x ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
     # - echo "Check if kubectl and aws-iam-auth got installed:"
      - kubectl version --client
      - aws-iam-authenticator help
      # Installing awscli and jq
      - apt-get update && apt-get install -y python-dev jq
      # - docker pull anchore/engine-cli:v0.8.2
      - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py  
      - python get-pip.py
      - pip install awscli
      #- echo "AWS VERSION"
      #- aws --version
      - $(aws ecr get-login --no-include-email)
      # - ANCHORE_CMD="docker run -e ANCHORE_CLI_URL=$ANCHORE_CLI_URL -e ANCHORE_CLI_USER=$ANCHORE_CLI_USER -e ANCHORE_CLI_PASS=$ANCHORE_CLI_PASS anchore/engine-cli:v0.8.2 anchore-cli"
      # - $ANCHORE_CMD registry add $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com awsauto awsauto --registry-type=awsecr || return 0
  build: 
    commands:
      # - docker build $CODEBUILD_SRC_DIR_AppSource -t $IMAGE
      # - docker push $IMAGE
      - echo Build start at `date`
      - cd $CODEBUILD_SRC_DIR
      - git clone https://github.com/comprinnotech/tevico-accounts-core.git
      - mvn clean -DskipTest
      - mv accounts/target/accounts-SNAPSHOT-exec.jar  ../assets/accounts/accounts.jar
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - echo commit_hash = $COMMIT_HASH
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - sed -i 's@PORT@' "8090" '@' Dockerfile
      - echo Dockerfile updated
      - cat Dockerfile
      - echo Building image using the docker file
      - docker build -t accounts .
      - docker images
      - docker tag accounts:latest ${data.aws_caller_identity.current.account_id}.dkr.ecr.${var.region}.amazonaws.com/${var.cicd_conf.codebuild_environment_variables.accounts.pre-prod-tevico-accounts}:V1
      - docker images
      - echo Pushing docker image to ECR
      - docker push ${data.aws_caller_identity.current.account_id}.dkr.ecr.${var.region}.amazonaws.com/${var.cicd_conf.codebuild_environment_variables.accounts.pre-prod-tevico-accounts}:V1
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s"}' ${data.aws_caller_identity.current.account_id}.dkr.ecr.${var.region}.amazonaws.com/${var.cicd_conf.codebuild_environment_variables.accounts.pre-prod-tevico-accounts}:V1 > imageDetail.json
      - cat imageDetail.json
      - echo end of build phase      
  post_build:
    commands:
      - echo Checking ECR scan results
      - |
        
        export X=1 && echo $X
        while [ $X -le 5 ]
        do
          echo Waiting for 1 min
          sleep 60
          
          # Check if ECR scan results are ready
          SCAN_COMPLETE=$(aws ecr describe-images --repository-name pre-prod-tevico-accounts --image-id imageTag=V1 --region $AWS_DEFAULT_REGION | jq -r '.imageDetails[0].imageScanStatus.status')
          echo $SCAN_COMPLETE
          
          if [ ${SCAN_COMPLETE} = "COMPLETE" ]; then
            echo ECR scan is complete
            break
          else
            echo Scan is not yet complete
          fi
          
          X=$((X+1))
          # If $X is 6, image scan is not COMPLETE for 5 min
          if [ $X -eq 6 ]; then
            echo ECR scan is not COMPLETE until 5 min
            exit 1
          fi          
        done
        
        IMAGE_FOUND_IN_ECR=$(aws ecr describe-images --repository-name pre-prod-tevico-accounts --image-id imageTag=V1 --region $AWS_DEFAULT_REGION)        
        if [ $? -eq 0 ]; then
        
          aws ecr describe-image-scan-findings --repository-name pre-prod-tevico-accounts --image-id imageTag=V1 --region $AWS_DEFAULT_REGION | jq -r '.imageScanFindings' | jq -r '.findings' > findings.json

          if [ ! -z findings.json ]; then
            SCAN_RESULTS=$(cat findings.json | jq -r '.[] | select((.severity == "HIGH") or (.severity == "CRITICAL")) | .severity' | wc -l)
            echo $SCAN_RESULTS
          
            if [ $SCAN_RESULTS -gt 0 ]; then
              echo "Found vulnerabilities"
              exit 1
            else
              echo "No 'CRITICAL' or 'HIGH' vulnerabilities found"
            fi
          fi  
        else
          echo "Error while reading image in ECR"
          exit 1
        fi
      - echo Done checking vulnerabilities

      - sed -i 's@PORT@' "8090" '@' tevico-configuration-files/accounts/service.yaml
      - echo service file updated
      - cat tevico-configuration-files/accounts/service.yaml
      - sed -i 's@CONTAINER_IMAGE@'"${data.aws_caller_identity.current.account_id}.dkr.ecr.${var.region}.amazonaws.com/${var.cicd_conf.codebuild_environment_variables.accounts.pre-prod-tevico-accounts}:V1"'@' tevico-configuration-files/accounts/deployment.yaml
      - sed -i 's@PORT@' "8090" '@' tevico-configuration-files/accounts/deployment.yaml
      - sed -i 's@PARAMETER_STORE_ENV@'"$PARAMETER_STORE_ENV"'@' tevico-configuration-files/accounts/deployment.yaml
      - sed -i 's@DEPLOYMENT_REGION@'"$AWS_DEFAULT_REGION"'@' tevico-configuration-files/accounts/deployment.yaml
      - echo deployment file updated
      - cat tevico-configuration-files/accounts/deployment.yaml

      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - export KUBECONFIG=$PWD/kubeconfig
      - aws eks update-kubeconfig --kubeconfig $KUBECONFIG --name var.cicd_conf.codebuild_environment_variables.eks_cluster_name --region $AWS_DEFAULT_REGION
      #- cat $PWD/kubeconfig  
      # - export KUBECONFIG=$EKS_CLUSTER_NAME
      - echo "Check if kubectl get ns works fine:"
      - kubectl get ns
      - kubectl apply -k Kubernetes
      - echo "Deployments done!"
      - echo "Check if pods are running fine:"
      - kubectl get pods -n gari
      - |
        
        export X=1 && echo $X
        while [ $X -le 5 ]
        do
          echo Waiting for 1 min
          sleep 60
          
          # Check if Healthcheck is successful
          STATUS_CODE=$(curl -o -I -L -s -w "%{http_code}" $FQDN)
          echo $STATUS_CODE
          if [ ${STATUS_CODE} -eq 200 ]; then
            echo Healthcheck is complete
            break
          else
            echo Health Check is still pending
          fi
          
          X=$((X+1))
          # If $X is 6, image scan is not COMPLETE for 5 min
          if [ $X -eq 6 ]; then
            echo Healthcheck on $FQDN failed consecutively for 5 min
            exit 1
          fi          
        done
#reports:
  #report-name-or-arn:
    #files:
      # - location
      # - location
    #base-directory: location
    #discard-paths: yes
    #file-format: JunitXml | CucumberJson
#artifacts:
  #files:
    # - location
    # - location
  #name: $(date +%Y-%m-%d)
  #discard-paths: yes
  #base-directory: location
#cache:
  #paths:
    # - paths